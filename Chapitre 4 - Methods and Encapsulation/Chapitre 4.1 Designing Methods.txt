Ce chapitre va parler des variables d'instances, du mot clés final, des modificateurs d'accès, et de l'initialisation.
On apprendra aussi à écrire une expression lambda.

Designing method : 
------------------
La plupart des programmes java, ont une méthode main().
Nous pouvons écrire aussi d'autres méthodes.

Exemple :  Signature méthode 
	public final void nap(int minutes) throws InterruptedException {
		//take a nap

	}
public :  EN : acces modifier : FR : le modificateur d'accès  Requis : Non
--------
final : le spécificateur optionel Requis : Non
------
void : le type de retour : Requis : Oui
-----
nap :  le nom de la méthode Requis : Oui
----
() parenthèses obligatoire  Requis : oui
--------------------------
int minutes :  la liste des paramètres Requis : Pas obligatoire, juste les parenthèses
throws : exception (optionel) : Requis : non


Les modificateurs d'accès :
--------------------------

Java a 4 modificateurs d'accès :

On ne peut avoir qu'un modificateur d'accès

public : La méthode peut etre appelée depuis n'importe quelle classe.
-------

private : La méthode peut etre appelée seulement à l'intérieur de la classe.
-------

protected : la méthode peut etre appelée par les autres classes issus du meme package et les classes filles 
---------

Default acces : La méthode peut seulement etre appelée par des classes du meme package. Il est très piégeux car, il n'a pas de mot clés, Il faut simplement oublier de le mettre dans la -------------	 signature de la méthode

Les piéges que l'on rencontre pour l'examen :
---------------------------------------------
public void walk1() {} //ok
default void walk2() {} //default n'existe pas en tant que modificateur d'accès //does not compile
void public walk3() {} // DOES NOT COMPILE // parce que le modificateur d'accès ne peut pas etre après le type de retour
void walk4() // ok

Les spécificateurs optionels :
---------------------------

On peut avoir plusieurs spécificateurs optionels, quand ça arrive, l'ordre n'a pas d'importance, et puisqu'il n'est pas obligatoire, tu es autorisé de ne pas en avoir.
On peut avoir 0 ou plusieurs spécificateurs.

static : A savoir 
abstract : Chapitre 5
final : Chapitre 5
synchronised : OCP
native : not OCA not OCP : utiliser quand on veut intéragir avec du code ecrit dans un autre langage
strictfp  : 


Les piéges que l'on rencontre pour l'examen :
--------------------------------------------
public void walk1() {}
public final void walk2() {}
public static final void walk3() {}
public final static void walk4() {}
public modifier void walk5() {} //Does not compile //modifier n'existe pas
public void final walk6() // On ne peut pas placer à cet endroit le spécificateur optionel car il est après le type de retour /!\ il faut qu'il soit avant
final public void walk7() // compile le spécificateur peut etre mis avant le modificateur d'accès.



Le type de retour :
-----------------

Le type de retour d'une méthode peut etre un objet java comme String /int. Si il n'y a pas de type de retour, on utilise le mot clé void.
Le type de retour est obligatoire dans une méthode
Quand tu vérifies le type de retour, tu dois aussi regarder à l'intérieur de la méthode.
Une méthode dont le type de retour est autre que void doit avoir le mot clé return à l'intérieur de la méthode.
Les méthodes qui ont un type de retour de type void, peuvent avoir le mot clé return, mais il n'est pas obligatoire.

Exemple :
public void walk1() {}
public void walk2() {return;}
public String walk3() {return "";}
public String walk4() { } //Does not compile il manque le mot clé return;
public walk5() {} // Does not compile
public walk6(int a) {
	if (a == 4) {
		return "";
	}
	//Does not compile
}

il faut faire attention aussi au type de retour :
 Exemple :
 
 int integer() {
	return 9;
 }
int longMethod() {
	return 9L; //Does not compile
}

int integerExpanded() {
	int temp = 9;
	return temp;
}
int longExpanded() {
	int temp = 9L //Does not compile
	return temp;
}

Nom de méthode:
---------------

le nom de la méthode suit les mêmes regles de nommage que les variables (chapitre 1) :
Le nom peut seulement contenir des lettres, des nombres,$, ou -.
Il ne peut pas commencer par un nombre. et les mots reservés ne sont pas permis.
Par convention, les méthodes commencent par une lettre en minuscule


Exemple :
public void walk1();
public void 2walk() {} //Does not compile //interdiction de commencer par un chiffre
public walk3 void() {} //Does not compile // le type de retour doit etre avant le nom de la méthode
public void Walk_$() {} //ok // mais par convention il ne faut pas mettre des majuscules
public void() {} //absence de nom de methode //c'est un mot reservé


Les paramètres :
----------------
Bien que la liste des paramètres est obligatoire, elle peut etre vide.
ça signifie que void nap() {} est valide.
Si il y a des paramètres multiples, il faut les séparer par une virgule.
il y a aussi un nombre de régle à savoir concernant les paramètres quand nous verrons les varargs.

public void walk1() {}
public void walk2 {} //parenthèses manquantes.
public void walk3(int a) { }
public void walk4(int a ; int b) {} //Does not compile car ;
public void walk5(int a , int b) {} //ok


La liste des exceptions optionelles
------------------------------------
En java, le code peut indiquer que quelque chose ne fonctionne pas en remontant une exception.
Pour le moment, il faut juste savoir que c'est optionel.
On peut avoir à la suite plusieurs exceptions

Exemple :

public void zeroException() {}
public void oneException() throws IllegalArgumentException {}
public void twoException() throws IllegalArgumentException, InterruptedException {}


Method body
------------
Il s'agit d'un bloque de code, les accolades contiennent 0 ou plusieurs morceaux de codes.

Exemple :
public void walk1() {}
public void walk2() ; //manque les accolades
public void walk3(int a) {int name = 5;}

Travailler avec les varargs
----------------------------

Une méthode peut utiliser des vargars (variables arguments) comme un tableau. Bien que ce soit différent d'un tableau.
Un parametre de type varargs doit etre positionné en dernière position. Cela implique tu ne peux avoir qu'un seul vargar dans la liste des paramètres

Exemple :
public void walk1(int... nums) {} //Possible car seulement 1 paramètre de type varargs 
public void walk2(int start, int... nums) {} //Possible car 1 parametre de type int et un parametre de type varargs
public void walk3(int... nums, int start) {} //Does not compile // le parametre varargs doit etre positionné à la fin 
public void walk3(int... nums, int... start) {} //Does not compile // il ne peut avoir qu'un seul parametre de type varargs.

Quand on appelle une méthode avec un parametre de type varargs, tu peux sois passer un tableau, ou tu peux lister les elements du tableau et laisser java le créer pour toi.

